const qrcode = require('qrcode-terminal');
const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const path = require('path');

// Inicializa o cliente do WhatsApp com autentica√ß√£o local
const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        executablePath: 'C:/Program Files/Google/Chrome/Application/chrome.exe', // Caminho do Chrome para enviar videos
    }
});

let nomesUsuarios = {}; // Armazena o nome dos usu√°rios por n√∫mero

// Gera o QR Code para login
client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
    console.log('Escaneie o QR Code para conectar ao WhatsApp.');
});

// Cliente pronto
client.on('ready', () => {
    console.log('Cliente conectado e pronto para uso!');
});

// Fun√ß√£o para simular digita√ß√£o
const simularDigitacao = async (chat, tempo = 2000) => {
    await chat.sendStateTyping();
    return new Promise(resolve => setTimeout(resolve, tempo));
};

// Fun√ß√£o para capturar o nome do usu√°rio
const capturarNome = async (msg) => {
    const contato = await msg.getContact();
    const nome = contato.pushname || "Cliente"; // Nome ou "Cliente" padr√£o
    nomesUsuarios[msg.from] = nome; // Armazena o nome do usu√°rio pelo n√∫mero
    return nome;
};

// Resposta autom√°tica √†s mensagens recebidas
client.on('message', async (msg) => {
    const chat = await msg.getChat();
    const mensagemRecebida = msg.body.toLowerCase(); // Converte a mensagem para min√∫sculas

    // Captura o nome do usu√°rio na primeira intera√ß√£o
    if (!nomesUsuarios[msg.from]) {
        await capturarNome(msg);
    }
    const nomeUsuario = nomesUsuarios[msg.from] || "Cliente"; // Recupera o nome do usu√°rio ou "Cliente"

    // Fun√ß√£o para responder de acordo com o hor√°rio
    const saudacaoPorHora = () => {
        const hora = new Date().getHours();
        if (hora < 12) return 'Bom dia';
        if (hora < 18) return 'Boa tarde';
        return 'Boa noite';
    };

    // Respostas para sauda√ß√£o com varia√ß√µes de entrada
    if (["oi", "ol√°", "quero testar", "quero teste", "d√£o teste", "posso ter mais informa√ß√µes","quero"].some(palavra => mensagemRecebida.includes(palavra))) {
        await simularDigitacao(chat); // Simula digita√ß√£o
        msg.reply(`${saudacaoPorHora()}, ${nomeUsuario}! üëã Bem-vindo ao atendimento da *Agaf Play*.\nComo posso ajudar voc√™ hoje? üòä`);
        return;
    }

    // Menu principal
    if (["menu", "informa√ß√µes", "app", "v√≠deos", "teste","Testar","testar","T√™m teste", "pagamento", "revendedor", "gostaria de testar","eu quria testar","Voc√™s fazem teste, Como testar o vosso servi√ßo"].some(palavra => mensagemRecebida.includes(palavra))) {
        await simularDigitacao(chat);
        msg.reply(`Ol√°, ${nomeUsuario}! Seja bem-vindo ao *Brux Play*! üñ•Ô∏è\nPor favor, selecione uma op√ß√£o digitando o n√∫mero correspondente:\n
1Ô∏è‚É£ Informa√ß√µes  
2Ô∏è‚É£ Aplicativos  
3Ô∏è‚É£ V√≠deo Aulas  
4Ô∏è‚É£ Solicitar Teste  
5Ô∏è‚É£ Pagamentos  
6Ô∏è‚É£ Ser um Revendedor  
Ou digite *#sair* para encerrar o atendimento.`);
        return;
    }

    // Op√ß√µes detalhadas
    switch (mensagemRecebida) {
        case '1':
            await simularDigitacao(chat);
            msg.reply(`üí¨ *Informa√ß√£o Brux Play* ‚ÑπÔ∏è

O *Brux Play* √© sua plataforma de entretenimento, com TV ao vivo, filmes, s√©ries e muito mais! üé•üì∫‚öΩ  

Dispon√≠vel em smartphones, Smart TVs, computadores e tablets.  
*Baixe agora:* https://linktr.ee/lojapg  

Oferecemos *teste gratuito*. Estamos √† disposi√ß√£o, ${nomeUsuario}! üòä`);
            break;

        case '2':
            await simularDigitacao(chat);
            msg.reply(`üì≤ *Aplicativos Dispon√≠veis*

2Ô∏è‚É£‚àò1Ô∏è‚É£ *Android*    
2Ô∏è‚É£‚àò2Ô∏è‚É£ *iOS*   
2Ô∏è‚É£‚àò3Ô∏è‚É£ *Smart TV*   
2Ô∏è‚É£‚àò4Ô∏è‚É£ *TV Box*              
2Ô∏è‚É£‚àò5Ô∏è‚É£ *PC*    
Digite o n√∫mero da op√ß√£o para receber a imagem ou *#voltar* para retornar ao menu inicial.`);
            break;

        case '2.1': // Enviar imagem "Android"
            await simularDigitacao(chat);
            try {
                const imgAndroid = MessageMedia.fromFilePath(path.resolve(__dirname, 'imagem/android.png'));
                await client.sendMessage(msg.from, imgAndroid, { caption: `üì≤ *Aplicativo Android*, ${nomeUsuario}!` });
            } catch (error) {
                console.error('Erro ao enviar imagem Android:', error);
                msg.reply('Erro ao carregar a imagem do aplicativo Android.');
            }
            break;

        case '2.2': // Enviar imagem "iOS"
            await simularDigitacao(chat);
            try {
                const imgIOS = MessageMedia.fromFilePath(path.resolve(__dirname, 'imagem/ios.png'));
                await client.sendMessage(msg.from, imgIOS, { caption: `üì≤ *Aplicativo iOS*, ${nomeUsuario}!` });
            } catch (error) {
                console.error('Erro ao enviar imagem iOS:', error);
                msg.reply('Erro ao carregar a imagem do aplicativo iOS.');
            }
            break;

        case '2.3': // Enviar imagem "Smart TV"
            await simularDigitacao(chat);
            try {
                const imgSmartTV = MessageMedia.fromFilePath(path.resolve(__dirname, 'imagem/smarttv.png'));
                await client.sendMessage(msg.from, imgSmartTV, { caption: `üì≤ *Aplicativo Smart TV*, ${nomeUsuario}!` });
            } catch (error) {
                console.error('Erro ao enviar imagem Smart TV:', error);
                msg.reply('Erro ao carregar a imagem do aplicativo Smart TV.');
            }
            break;

        case '2.4': // Enviar imagem "TV Box"
            await simularDigitacao(chat);
            try {
                const imgTVBox = MessageMedia.fromFilePath(path.resolve(__dirname, 'imagem/tvbox.png'));
                await client.sendMessage(msg.from, imgTVBox, { caption: `üì≤ *Aplicativo TV Box*, ${nomeUsuario}!` });
            } catch (error) {
                console.error('Erro ao enviar imagem TV Box:', error);
                msg.reply('Erro ao carregar a imagem do aplicativo TV Box.');
            }
            break;

        case '2.5': // Enviar imagem "PC/Mac"
            await simularDigitacao(chat);
            try {
                const imgPCMac = MessageMedia.fromFilePath(path.resolve(__dirname, 'imagem/pcmac.png'));
                await client.sendMessage(msg.from, imgPCMac, { caption: `üì≤ *Aplicativo PC/Mac*, ${nomeUsuario}!` });
            } catch (error) {
                console.error('Erro ao enviar imagem PC/Mac:', error);
                msg.reply('Erro ao carregar a imagem do aplicativo PC/Mac.');
            }
            break;

        case '3': // V√≠deo Aulas
            await simularDigitacao(chat);
            msg.reply(`üé• *V√≠deo Aulas*  

3Ô∏è‚É£‚àò1Ô∏è‚É£ *Login Xtream*  
3Ô∏è‚É£‚àò2Ô∏è‚É£ *Login M3U*
3Ô∏è‚É£‚àò3Ô∏è‚É£ *Login Normal*
Digite o n√∫mero da op√ß√£o para receber o v√≠deo ou *#voltar* para retornar ao menu inicial.`);
            break;

        case '3.1': // Enviar v√≠deo "Login Xtream"
            await simularDigitacao(chat);
            try {
                const videoXtream = MessageMedia.fromFilePath(path.resolve(__dirname, 'video/xtreamcode.mp4'));
                await client.sendMessage(msg.from, videoXtream, { caption: `üé• *Login Xtream*, ${nomeUsuario}!` });
            } catch (error) {
                console.error('Erro ao enviar v√≠deo Xtream:', error);
                msg.reply('Erro ao carregar o v√≠deo do Login Xtream.');
            }
            break;

        case '3.2': // Enviar v√≠deo "Login M3U"
            await simularDigitacao(chat);
            try {
                const videoM3U = MessageMedia.fromFilePath(path.resolve(__dirname, 'video/iptvm3u.mp4'));
                await client.sendMessage(msg.from, videoM3U, { caption: `üé• *Login M3U*, ${nomeUsuario}!` });
            } catch (error) {
                console.error('Erro ao enviar v√≠deo M3U:', error);
                msg.reply('Erro ao carregar o v√≠deo do Login M3U.');
            }
            break;

            case '3.3': // Enviar v√≠deo "Login Normal"
            await simularDigitacao(chat);
            try {
                const videoNormal = MessageMedia.fromFilePath(path.resolve(__dirname, 'video/iptv.mp4'));
                await client.sendMessage(msg.from, videoNormal, { caption: `üé• *Login Normal*, ${nomeUsuario}!` });
            } catch (error) {
                console.error('Erro ao enviar v√≠deo Normal:', error);
                msg.reply('Erro ao carregar o v√≠deo do Login Normal.');
            }
            break;

        case '4':
            await simularDigitacao(chat);
            msg.reply(`üõ†Ô∏è *Solicitar Teste*  
Escolha uma op√ß√£o:  
4Ô∏è‚É£‚àò1Ô∏è‚É£ IPTV
4Ô∏è‚É£‚àò2Ô∏è‚É£ P2P 

Digite o n√∫mero da op√ß√£o para continuar.`);
            break;

            case '5':
                await simularDigitacao(chat);
                msg.reply(`üí≥ *Pre√ßos da Assinatura*  
     *30 Dias: 5000 KZ*  
     *60 Dias: 10.000 KZ*  
     *90 Dias: 14.850 KZ*  
    
    üè¶ *Nome do Benefici√°rio*: Ant√≥nio Gaspar.  
    üí≥ *IBAN BAI*: 0040 0000 24007364101 39  
    üìå *Kwik*: 944876128  
    üìå *Multicaixa Express*: 944876128  
    
    Aceitamos *apenas pagamentos instant√¢neos*.  
    Digite *#voltar* para retornar ao menu inicial.`);
                break;

        case '6': // Revendedor
            await simularDigitacao(chat);
            msg.reply(`üì¶ *Seja um Revendedor!*  

Entre em contato com nossa equipe de vendas para maiores detalhes.`);
            break;

        case '#voltar':
            await simularDigitacao(chat);
            msg.reply(`Voltando ao menu principal...`);
            break;

        case '#sair':
            await simularDigitacao(chat);
            msg.reply(`At√© mais, ${nomeUsuario}! üëã`);
            break;

        default:
            msg.reply('N√£o entendi o comando. Por favor, digite *menu* para visualizar as op√ß√µes dispon√≠veis.');
            break;
    }
});

// Inicia o cliente WhatsApp
client.initialize();
